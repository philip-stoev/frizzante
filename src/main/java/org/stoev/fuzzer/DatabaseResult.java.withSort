package org.stoev.fuzzer;

public final class DatabaseResult {
	private int errorCode;
	private final List<List<String>> resultSet = new ArrayList<List<String>>();
	
	private static final Comparator<List<String>> ROW_COMPARATOR = new RowComparator();

	private DatabaseResult(final ResultBuilder builder) {
		errorCode = builder.errorCode;
		resultSet = builder.resultSet;

		Collections.sort(resultSet, ROW_COMPARATOR);
	}

	public ResultComparison compareTo(DatabaseResult otherResult) {
		if (this.errorCode != otherResult.errorCode) {
			return ResultComparison.COMPARISON_ERROR_MISMATCH;
		}

		if (this.resultSet.size() != otherResult.resultSet.size()) {
			return ResultComparison.COMPARISON_LENGTH_MISMATCH;
		}

		for (int i; i < this.resultSet.size(); i++) {
			if (ROW_COMPARATOR.compare(this.resultSet.get(i), otherResult.resultSet.get(i))) {
				return ResultComparison.COMPARISON_CONTENT_MISMATCH;
			}
		}

//		assert this.toString().equals(otherResult.toString());
		return ResultComparison.COMPARISON_IDENTICAL;
	}

	private static final class ResultBuilder {

		private int errorCode;
		private List<List<String>> resultSet = new ArrayList<List<String>>();

		public ResultBuilder errorCode(int errorCode) {
			this.errorCode = errorCode;
			return this;
		}

		public ResultBuilder appendRow(List<String> row) {
			resultSet.append(row);
			return this;
		}

		public DatabaseResult build() {
			return new DatabaseResult(this);
		}
	
	}

	private final class RowComparator implements Comparator<List<String>> {
		@Override
		public int compare(List<String> a, List<String> b) {
			assert a.size() == b.size();
			
			for (int i; i < a.size(); i++) {
				int compareOutcome = a.get(i).compareTo(b);
				if (compareOutcome != 0) {
					return compareOutcome;
				}
			}
			
			return 0;
		}
	}



	void setErrorCode(int ec) {
		assert this.errorCode == 0;
		this.errorCode = ec;
        }

	void appendRow(List<String> row) {
		resultSet.add(row);
	}
}
